$include_const "iglobals.pasm";
using extern "io_ops";

function main[main](argv) {
  var parrot_math_primality = {
    "name"              : 'parrot_math_primality',
    "abstract"          : 'Primality Algorithms for Parrot Virtual Machine',
    "description"       : 'Primality Algorithms for Parrot Virtual Machine',
    "authority"         : 'http://github.com/letolabs',
    "copyright_holder"  : 'Jonathan "Duke" Leto',
    "keywords"          : ["parrot", "math", "primes", "primality", "pseudoprimes"],
    "license_type"      : 'GPLv3',
    "license_uri"       : 'http://github.com/letolabs/parrot_math_primality/blob/master/LICENSE',
    "checkout_uri"      : 'git://github.com/letolabs/parrot-math-primality.git',
    "browser_uri"       : 'git://github.com/letolabs/parrot-math-primality',
    "project_uri"       : 'git://github.com/letolabs/parrot-math-primality',
    "pir_winxed"        : {},
    "pbc_pir"           : {},
    "inst_lib"          : [],
    "installable_pbc"   : {},
    "include_winxed"    : {},
    "manifest_includes" : ["README.md", "setup.winxed"]
  };

  if (argv[1] == "test")
    do_test();

  setup_stable_libraries(parrot_math_primality);

  load_bytecode('distutils.pir');
  using setup;
  using register_step_before;

  register_step_before("build", check_dependencies);
  register_step_before("clean", clean_build_dir);

  argv.shift();
  setup(argv, parrot_math_primality);
}

function setup_stable_libraries(var parrot_math_primality) {
}

function do_test() {
  int result;
  string cmd = "parrot-nqp t/harness";
  ${ spawnw result, cmd };
  ${ exit result };
}

function check_dependencies() {
  var config = getinterp()[IGLOBALS_CONFIG_HASH];
  // Check if Parrot is > 3.5.0
  int maj = config['MAJOR'];
  int min = config['MINOR'];
  if (maj < 3 || (maj == 3 && min < 5)) {
    die("You need at least Parrot 3.5.0 to use parrot_math_primality");
  }
  // Check if parrot-gmp is present
  int has_parrot_gmp =  1 ; // TODO
  if (!has_parrot_gmp) {
    die("You need to have Parrot configured with parrot-gmp to use parrot_math_primality");
  }
}

function clean_build_dir() {
  var config = getinterp()[IGLOBALS_CONFIG_HASH];
  unlink("src/Math/Primality.pbc");
}
